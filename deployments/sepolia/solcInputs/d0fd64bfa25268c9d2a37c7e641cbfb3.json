{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n    mapping (address => uint256) public fundersToAmount;\n\n    uint256 MINIMUM_VALUE = 100 * 10 ** 18;\n\n    uint256 constant TARGET = 1000 * 10 ** 18;\n\n    AggregatorV3Interface public dataFeed;\n\n    uint256 deploymentTimestamp;\n\n    uint256 lockTime;\n\n    address public owner;\n\n    address public erc20Addr;\n\n    bool public getFundSuccess = false;\n\n    constructor (uint256 _lockTime, address dataFeedAddr) {\n        // sepolia testnet\n//        dataFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        owner = msg.sender;\n        deploymentTimestamp = block.timestamp;\n        lockTime = _lockTime;\n    }\n\n    function fund () external payable  {\n        require(block.timestamp - deploymentTimestamp < lockTime, \"Lock time is full.\");\n        require(convertEthToUsd(msg.value) >= MINIMUM_VALUE, \"Send more ETH!\");\n        fundersToAmount[msg.sender] = msg.value;\n    }\n\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n        /* uint80 roundId */,\n            int256 answer,\n        /*uint256 startedAt*/,\n        /*uint256 updatedAt*/,\n        /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n    // 439732516300\n\n    function convertEthToUsd (uint256 ethAmount) internal view returns (uint256) {\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return ethAmount * (ethPrice / 10 ** 8);\n    }\n\n    function transferOwnerShip (address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function getFund () external windowClosed onlyOwner {\n        require(convertEthToUsd(address(this).balance) > TARGET, \"Target is not reached\");\n        /**\n            transfer: transfer and revert if tx failed.\n            payable(msg.sender).transfer(address(this).balance);\n        */\n        /**\n            send: transfer eth and return false if failed.\n                    bool success = payable(msg.sender).send(address(this).balance);\n        */\n        /**\n            call: transfer eth with data return value of function and bool;\n        */\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"transfer tx failed\");\n        fundersToAmount[msg.sender] = 0;\n        getFundSuccess = true;\n    }\n\n    function refund () external windowClosed returns (bool, bytes memory) {\n        require(convertEthToUsd(address(this).balance) < TARGET, \"fund is less than target.\");\n        uint256 amount = fundersToAmount[msg.sender];\n        require(amount != 0, \"There is no fund.\");\n        (bool success, bytes memory returnData) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"transfer tx failed\");\n        fundersToAmount[msg.sender] = 0;\n        return (success, returnData);\n    }\n\n    function getFunderToAmount (address funder) public view returns (uint256) {\n        return fundersToAmount[funder];\n    }\n\n    function setFunderToAmount (address funder, uint256 amount) external {\n        require(msg.sender == erc20Addr, \"you do not permission to call this func\");\n        fundersToAmount[funder] = amount;\n    }\n\n    function setErc20Addr (address _erc20Addr) public onlyOwner {\n        erc20Addr = _erc20Addr;\n    }\n\n    modifier windowClosed () {\n        require(block.timestamp - deploymentTimestamp > lockTime, \"Lock time is not full.\");\n        _;\n    }\n\n    modifier onlyOwner () {\n        require(msg.sender == owner, \"You are not owner. can't call this func\");\n        _;\n    }\n\n}"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}